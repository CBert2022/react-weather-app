{"ast":null,"code":"var _jsxFileName = \"/Users/carobert/Documents/Web_Development/react-weather-app/weather-app/src/Components/Details.js\",\n  _s = $RefreshSig$();\n// Details.js\nimport React, { useState, useEffect } from \"react\"; // Importiere useEffect für die API-Abruf\nimport axios from \"axios\";\nimport Cloud from \"./assets/cloud.png\";\nimport Clear from \"./assets/sun.png\";\nimport Rain from \"./assets/rainy-day.png\";\nimport Storm from \"./assets/storm.png\";\nimport Fog from \"./assets/fog.png\";\nimport Snow from \"./assets/snowy.png\";\nimport Cloudy from \"./assets/cloudy.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Details({\n  cityName,\n  minTemp,\n  maxTemp,\n  image\n}) {\n  _s();\n  // Zugriff auf die API-Schlüssel aus den Umgebungsvariablen\n  const {\n    REACT_APP_API_KEY\n  } = process.env;\n\n  // Ermitteln der Wochentage\n  let daysOfWeek = [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"];\n\n  // Index des heutigen Wochentags\n  let today = new Date().getDay();\n\n  // Objekt zum Sammeln der Mindest- und Maximaltemperaturen für jeden Tag\n  let tempsByDay = {};\n  const [day2_minTemp, setDay2_minTemp] = useState(\"\");\n  const [day3_minTemp, setDay3_minTemp] = useState(\"\");\n  const [day4_minTemp, setDay4_minTemp] = useState(\"\");\n  const [day5_minTemp, setDay5_minTemp] = useState(\"\");\n  const [day6_minTemp, setDay6_minTemp] = useState(\"\");\n  const [day2_maxTemp, setDay2_maxTemp] = useState(\"\");\n  const [day3_maxTemp, setDay3_maxTemp] = useState(\"\");\n  const [day4_maxTemp, setDay4_maxTemp] = useState(\"\");\n  const [day5_maxTemp, setDay5_maxTemp] = useState(\"\");\n  const [day6_maxTemp, setDay6_maxTemp] = useState(\"\");\n  const [day2_name, setDay2Name] = useState(\"\");\n  const [day3_name, setDay3Name] = useState(\"\");\n  const [day4_name, setDay4Name] = useState(\"\");\n  const [day5_name, setDay5Name] = useState(\"\");\n  const [day6_name, setDay6Name] = useState(\"\");\n  const [day2_image, setDay2Image] = useState(\"\");\n  const [day3_image, setDay3Image] = useState(\"\");\n  const [day4_image, setDay4Image] = useState(\"\");\n  const [day5_image, setDay5Image] = useState(\"\");\n  const [day6_image, setDay6Image] = useState(\"\");\n  useEffect(() => {\n    //console.log(cityName);\n    const apiURL = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${REACT_APP_API_KEY}&units=metric&lang=de`;\n    axios.get(apiURL).then(res => {\n      console.log(res.data.list);\n      console.log(res.data.list[0].weather[0].main);\n      let imagePath = \"\";\n      for (let i = 0; i < res.data.list.length; i++) {\n        let apiDate = new Date(res.data.list[i].dt_txt).getDay();\n        let minTempOfDay = res.data.list[i].main.temp_min;\n        let maxTempOfDay = res.data.list[i].main.temp_max;\n        let iconOfDay = res.data.list[i].weather[0].main;\n        let timeOfDay = res.data.list[i].dt_txt.slice(-8); // Extrahiere die Uhrzeit\n\n        // Füge die Mindest- und Maximaltemperaturen zum entsprechenden Tag hinzu\n        if (apiDate !== today) {\n          let dayOfWeek = daysOfWeek[apiDate];\n          if (!tempsByDay[dayOfWeek]) {\n            tempsByDay[dayOfWeek] = {\n              min: [],\n              max: [],\n              icon: \"\"\n            };\n          }\n          tempsByDay[dayOfWeek].min.push(minTempOfDay);\n          tempsByDay[dayOfWeek].max.push(maxTempOfDay);\n        }\n\n        // Extrahiere das Wetter-Icon nur für den Datensatz um 09:00 Uhr\n        if (timeOfDay === \"09:00:00\") {\n          let dayOfWeek = daysOfWeek[apiDate];\n          if (!tempsByDay[dayOfWeek]) {\n            tempsByDay[dayOfWeek] = {\n              min: [],\n              max: [],\n              icon: \"\"\n            };\n          }\n          tempsByDay[dayOfWeek].icon = iconOfDay;\n        }\n      }\n      console.log(\"Mindesttemperaturen für jeden Wochentag:\", tempsByDay);\n\n      // Ermitteln der kleinsten Mindesttemp und der größten Maximaltemp\n      // Iteriere über jeden Wochentag im tempsByDay-Objekt\n      for (let i = 0; i < daysOfWeek.length; i++) {\n        let day = daysOfWeek[i];\n\n        // Wenn der Tag nach dem aktuellen Tag liegt\n        if (i > today) {\n          // Finde die kleinste und größte Temperatur für den aktuellen Tag\n          let minTemp = tempsByDay[day].min[0];\n          let maxTemp = tempsByDay[day].max[0];\n          for (let temp of tempsByDay[day].min) {\n            if (temp < minTemp) {\n              minTemp = temp;\n            }\n          }\n          for (let temp of tempsByDay[day].max) {\n            if (temp > maxTemp) {\n              maxTemp = temp;\n            }\n          }\n        }\n\n        // Setze Usestates entsprechend der Tage\n        switch (i) {\n          case today + 1:\n            setDay2_minTemp(minTemp);\n            setDay2_maxTemp(maxTemp);\n            setDay2Name(day);\n            break;\n          case today + 2:\n            setDay3_minTemp(minTemp);\n            setDay3_maxTemp(maxTemp);\n            setDay3Name(day);\n            break;\n          case today + 3:\n            setDay4_minTemp(minTemp);\n            setDay4_maxTemp(maxTemp);\n            setDay4Name(day);\n            break;\n          case today + 4:\n            setDay5_minTemp(minTemp);\n            setDay5_maxTemp(maxTemp);\n            setDay5Name(day);\n            break;\n          case today + 5:\n            setDay6_minTemp(minTemp);\n            setDay6_maxTemp(maxTemp);\n            setDay6Name(day);\n            break;\n          default:\n            break;\n        }\n      }\n\n      // Icons extrahieren\n      // Zugriff auf die Schlüssel des Objekts\n      // Iteration über die ersten fünf Einträge\n      const keys = Object.keys(tempsByDay);\n      for (let i = 0; i < 5; i++) {\n        //erster Eintrag = Tag\n        const day = keys[i];\n        switch (tempsByDay[day].icon) {\n          case \"Clouds\":\n            setDay2Image(Cloud);\n            setDay3Image(Cloud);\n            setDay4Image(Cloud);\n            setDay5Image(Cloud);\n            setDay6Image(Cloud);\n            break;\n          case \"Clear\":\n            setDay2Image(Clear);\n            setDay3Image(Clear);\n            setDay4Image(Clear);\n            setDay5Image(Clear);\n            setDay6Image(Clear);\n            break;\n          case \"Rain\":\n            setDay2Image(Rain);\n            setDay3Image(Rain);\n            setDay4Image(Rain);\n            setDay5Image(Rain);\n            setDay6Image(Rain);\n            break;\n          case \"Storm\":\n            setDay2Image(Storm);\n            setDay3Image(Storm);\n            setDay4Image(Storm);\n            setDay5Image(Storm);\n            setDay6Image(Storm);\n            break;\n          case \"Fog\":\n            setDay2Image(Fog);\n            setDay3Image(Fog);\n            setDay4Image(Fog);\n            setDay5Image(Fog);\n            setDay6Image(Fog);\n            break;\n          case \"Snow\":\n            setDay2Image(Snow);\n            setDay3Image(Snow);\n            setDay4Image(Snow);\n            setDay5Image(Snow);\n            setDay6Image(Snow);\n            break;\n          default:\n            setDay2Image(Cloudy);\n            setDay3Image(Cloudy);\n            setDay4Image(Cloudy);\n            setDay5Image(Cloudy);\n            setDay6Image(Cloudy);\n            break;\n        }\n      }\n    }).catch(err => {\n      console.error(\"Fehler beim Abrufen der Wetterdaten:\", err);\n    });\n  }, [cityName, today]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container_temp_infos\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"5-Tage-Vorhersage\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container_forecast\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_row\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"forecast_day\",\n            children: \"Heute\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"forecast_icon\",\n            src: image,\n            alt: \"wetter icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"minTemp\",\n            children: [Math.round(minTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [Math.round(maxTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"devider_forcast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_row\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day2_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"forecast_icon\",\n            src: day2_image,\n            alt: \"wetter icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"minTemp\",\n            children: [Math.round(day2_minTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [Math.round(day2_maxTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"devider_forcast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_row\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day3_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"forecast_icon\",\n            src: day3_image,\n            alt: \"wetter icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"minTemp\",\n            children: [Math.round(day3_minTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [Math.round(day3_maxTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"devider_forcast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_row\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day4_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"forecast_icon\",\n            src: day4_image,\n            alt: \"wetter icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"minTemp\",\n            children: [Math.round(day4_minTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [Math.round(day4_maxTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"devider_forcast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_row\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day5_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"forecast_icon\",\n            src: day5_image,\n            alt: \"wetter icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"minTemp\",\n            children: [Math.round(day5_minTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [Math.round(day5_maxTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"devider_forcast\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast_row\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: day6_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"forecast_icon\",\n            src: day6_image,\n            alt: \"wetter icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"minTemp\",\n            children: [Math.round(day6_minTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [Math.round(day6_maxTemp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"tab\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Details, \"hfqI+qhSjZ+M6UqRMsL8po9Tx7I=\");\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["React","useState","useEffect","axios","Cloud","Clear","Rain","Storm","Fog","Snow","Cloudy","jsxDEV","_jsxDEV","Fragment","_Fragment","Details","cityName","minTemp","maxTemp","image","_s","REACT_APP_API_KEY","process","env","daysOfWeek","today","Date","getDay","tempsByDay","day2_minTemp","setDay2_minTemp","day3_minTemp","setDay3_minTemp","day4_minTemp","setDay4_minTemp","day5_minTemp","setDay5_minTemp","day6_minTemp","setDay6_minTemp","day2_maxTemp","setDay2_maxTemp","day3_maxTemp","setDay3_maxTemp","day4_maxTemp","setDay4_maxTemp","day5_maxTemp","setDay5_maxTemp","day6_maxTemp","setDay6_maxTemp","day2_name","setDay2Name","day3_name","setDay3Name","day4_name","setDay4Name","day5_name","setDay5Name","day6_name","setDay6Name","day2_image","setDay2Image","day3_image","setDay3Image","day4_image","setDay4Image","day5_image","setDay5Image","day6_image","setDay6Image","apiURL","get","then","res","console","log","data","list","weather","main","imagePath","i","length","apiDate","dt_txt","minTempOfDay","temp_min","maxTempOfDay","temp_max","iconOfDay","timeOfDay","slice","dayOfWeek","min","max","icon","push","day","temp","keys","Object","catch","err","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","Math","round","id","_c","$RefreshReg$"],"sources":["/Users/carobert/Documents/Web_Development/react-weather-app/weather-app/src/Components/Details.js"],"sourcesContent":["// Details.js\nimport React, { useState, useEffect } from \"react\"; // Importiere useEffect für die API-Abruf\nimport axios from \"axios\";\nimport Cloud from \"./assets/cloud.png\";\nimport Clear from \"./assets/sun.png\";\nimport Rain from \"./assets/rainy-day.png\";\nimport Storm from \"./assets/storm.png\";\nimport Fog from \"./assets/fog.png\";\nimport Snow from \"./assets/snowy.png\";\nimport Cloudy from \"./assets/cloudy.png\";\n\nfunction Details({ cityName, minTemp, maxTemp, image }) {\n  // Zugriff auf die API-Schlüssel aus den Umgebungsvariablen\n  const { REACT_APP_API_KEY } = process.env;\n\n  // Ermitteln der Wochentage\n  let daysOfWeek = [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"];\n\n  // Index des heutigen Wochentags\n  let today = new Date().getDay();\n\n  // Objekt zum Sammeln der Mindest- und Maximaltemperaturen für jeden Tag\n  let tempsByDay = {};\n\n  const [day2_minTemp, setDay2_minTemp] = useState(\"\");\n  const [day3_minTemp, setDay3_minTemp] = useState(\"\");\n  const [day4_minTemp, setDay4_minTemp] = useState(\"\");\n  const [day5_minTemp, setDay5_minTemp] = useState(\"\");\n  const [day6_minTemp, setDay6_minTemp] = useState(\"\");\n\n  const [day2_maxTemp, setDay2_maxTemp] = useState(\"\");\n  const [day3_maxTemp, setDay3_maxTemp] = useState(\"\");\n  const [day4_maxTemp, setDay4_maxTemp] = useState(\"\");\n  const [day5_maxTemp, setDay5_maxTemp] = useState(\"\");\n  const [day6_maxTemp, setDay6_maxTemp] = useState(\"\");\n\n  const [day2_name, setDay2Name] = useState(\"\");\n  const [day3_name, setDay3Name] = useState(\"\");\n  const [day4_name, setDay4Name] = useState(\"\");\n  const [day5_name, setDay5Name] = useState(\"\");\n  const [day6_name, setDay6Name] = useState(\"\");\n\n  const [day2_image, setDay2Image] = useState(\"\");\n  const [day3_image, setDay3Image] = useState(\"\");\n  const [day4_image, setDay4Image] = useState(\"\");\n  const [day5_image, setDay5Image] = useState(\"\");\n  const [day6_image, setDay6Image] = useState(\"\");\n\n  useEffect(() => {\n    //console.log(cityName);\n    const apiURL = `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${REACT_APP_API_KEY}&units=metric&lang=de`;\n\n    axios\n      .get(apiURL)\n      .then((res) => {\n        console.log(res.data.list);\n        console.log(res.data.list[0].weather[0].main);\n        let imagePath = \"\";\n\n        for (let i = 0; i < res.data.list.length; i++) {\n          let apiDate = new Date(res.data.list[i].dt_txt).getDay();\n          let minTempOfDay = res.data.list[i].main.temp_min;\n          let maxTempOfDay = res.data.list[i].main.temp_max;\n          let iconOfDay = res.data.list[i].weather[0].main;\n          let timeOfDay = res.data.list[i].dt_txt.slice(-8); // Extrahiere die Uhrzeit\n\n          // Füge die Mindest- und Maximaltemperaturen zum entsprechenden Tag hinzu\n          if (apiDate !== today) {\n            let dayOfWeek = daysOfWeek[apiDate];\n            if (!tempsByDay[dayOfWeek]) {\n              tempsByDay[dayOfWeek] = { min: [], max: [], icon: \"\" };\n            }\n            tempsByDay[dayOfWeek].min.push(minTempOfDay);\n            tempsByDay[dayOfWeek].max.push(maxTempOfDay);\n          }\n\n          // Extrahiere das Wetter-Icon nur für den Datensatz um 09:00 Uhr\n          if (timeOfDay === \"09:00:00\") {\n            let dayOfWeek = daysOfWeek[apiDate];\n            if (!tempsByDay[dayOfWeek]) {\n              tempsByDay[dayOfWeek] = { min: [], max: [], icon: \"\" };\n            }\n            tempsByDay[dayOfWeek].icon = iconOfDay;\n          }\n        }\n\n        console.log(\"Mindesttemperaturen für jeden Wochentag:\", tempsByDay);\n\n        // Ermitteln der kleinsten Mindesttemp und der größten Maximaltemp\n        // Iteriere über jeden Wochentag im tempsByDay-Objekt\n        for (let i = 0; i < daysOfWeek.length; i++) {\n          let day = daysOfWeek[i];\n\n          // Wenn der Tag nach dem aktuellen Tag liegt\n          if (i > today) {\n            // Finde die kleinste und größte Temperatur für den aktuellen Tag\n            let minTemp = tempsByDay[day].min[0];\n            let maxTemp = tempsByDay[day].max[0];\n\n            for (let temp of tempsByDay[day].min) {\n              if (temp < minTemp) {\n                minTemp = temp;\n              }\n            }\n\n            for (let temp of tempsByDay[day].max) {\n              if (temp > maxTemp) {\n                maxTemp = temp;\n              }\n            }\n          }\n\n          // Setze Usestates entsprechend der Tage\n          switch (i) {\n            case today + 1:\n              setDay2_minTemp(minTemp);\n              setDay2_maxTemp(maxTemp);\n              setDay2Name(day);\n              break;\n            case today + 2:\n              setDay3_minTemp(minTemp);\n              setDay3_maxTemp(maxTemp);\n              setDay3Name(day);\n              break;\n            case today + 3:\n              setDay4_minTemp(minTemp);\n              setDay4_maxTemp(maxTemp);\n              setDay4Name(day);\n              break;\n            case today + 4:\n              setDay5_minTemp(minTemp);\n              setDay5_maxTemp(maxTemp);\n              setDay5Name(day);\n              break;\n            case today + 5:\n              setDay6_minTemp(minTemp);\n              setDay6_maxTemp(maxTemp);\n              setDay6Name(day);\n              break;\n            default:\n              break;\n          }\n        }\n\n        // Icons extrahieren\n        // Zugriff auf die Schlüssel des Objekts\n        // Iteration über die ersten fünf Einträge\n        const keys = Object.keys(tempsByDay);\n        for (let i = 0; i < 5; i++) {\n          //erster Eintrag = Tag\n          const day = keys[i];\n          switch (tempsByDay[day].icon) {\n            case \"Clouds\":\n              setDay2Image(Cloud);\n              setDay3Image(Cloud);\n              setDay4Image(Cloud);\n              setDay5Image(Cloud);\n              setDay6Image(Cloud);\n              break;\n            case \"Clear\":\n              setDay2Image(Clear);\n              setDay3Image(Clear);\n              setDay4Image(Clear);\n              setDay5Image(Clear);\n              setDay6Image(Clear);\n              break;\n            case \"Rain\":\n              setDay2Image(Rain);\n              setDay3Image(Rain);\n              setDay4Image(Rain);\n              setDay5Image(Rain);\n              setDay6Image(Rain);\n              break;\n            case \"Storm\":\n              setDay2Image(Storm);\n              setDay3Image(Storm);\n              setDay4Image(Storm);\n              setDay5Image(Storm);\n              setDay6Image(Storm);\n              break;\n            case \"Fog\":\n              setDay2Image(Fog);\n              setDay3Image(Fog);\n              setDay4Image(Fog);\n              setDay5Image(Fog);\n              setDay6Image(Fog);\n              break;\n            case \"Snow\":\n              setDay2Image(Snow);\n              setDay3Image(Snow);\n              setDay4Image(Snow);\n              setDay5Image(Snow);\n              setDay6Image(Snow);\n              break;\n            default:\n              setDay2Image(Cloudy);\n              setDay3Image(Cloudy);\n              setDay4Image(Cloudy);\n              setDay5Image(Cloudy);\n              setDay6Image(Cloudy);\n              break;\n          }\n        }\n      })\n      .catch((err) => {\n        console.error(\"Fehler beim Abrufen der Wetterdaten:\", err);\n      });\n  }, [cityName, today]);\n\n  return (\n    <>\n      <div className=\"container_temp_infos\">\n        <h3>5-Tage-Vorhersage</h3>\n        <div className=\"container_forecast\">\n          <div className=\"forecast_row\">\n            <p className=\"forecast_day\">Heute</p>\n            <img className=\"forecast_icon\" src={image} alt=\"wetter icon\" />\n            <p className=\"minTemp\">{Math.round(minTemp)}°C</p>\n            <p>{Math.round(maxTemp)}°C</p>\n          </div>\n          <div className=\"devider_forcast\"></div>\n          <div className=\"forecast_row\">\n            <p>{day2_name}</p>\n            <img className=\"forecast_icon\" src={day2_image} alt=\"wetter icon\" />\n            <p className=\"minTemp\">{Math.round(day2_minTemp)}°C</p>\n            <p>{Math.round(day2_maxTemp)}°C</p>\n          </div>\n          <div className=\"devider_forcast\"></div>\n          <div className=\"forecast_row\">\n            <p>{day3_name}</p>\n            <img className=\"forecast_icon\" src={day3_image} alt=\"wetter icon\" />\n            <p className=\"minTemp\">{Math.round(day3_minTemp)}°C</p>\n            <p>{Math.round(day3_maxTemp)}°C</p>\n          </div>\n          <div className=\"devider_forcast\"></div>\n          <div className=\"forecast_row\">\n            <p>{day4_name}</p>\n            <img className=\"forecast_icon\" src={day4_image} alt=\"wetter icon\" />\n            <p className=\"minTemp\">{Math.round(day4_minTemp)}°C</p>\n            <p>{Math.round(day4_maxTemp)}°C</p>\n          </div>\n          <div className=\"devider_forcast\"></div>\n          <div className=\"forecast_row\">\n            <p>{day5_name}</p>\n            <img className=\"forecast_icon\" src={day5_image} alt=\"wetter icon\" />\n            <p className=\"minTemp\">{Math.round(day5_minTemp)}°C</p>\n            <p>{Math.round(day5_maxTemp)}°C</p>\n          </div>\n          <div className=\"devider_forcast\"></div>\n          <div className=\"forecast_row\">\n            <p>{day6_name}</p>\n            <img className=\"forecast_icon\" src={day6_image} alt=\"wetter icon\" />\n            <p className=\"minTemp\">{Math.round(day6_minTemp)}°C</p>\n            <p>{Math.round(day6_maxTemp)}°C</p>\n          </div>\n        </div>\n        <div id=\"tab\"></div>\n      </div>\n    </>\n  );\n}\nexport default Details;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}