{"ast":null,"code":"import\"../style.css\";import Cloud from\"./assets/cloud.png\";import Clear from\"./assets/sun.png\";import Rain from\"./assets/rainy-day.png\";import Storm from\"./assets/storm.png\";import Fog from\"./assets/fog.png\";import Snow from\"./assets/snowy.png\";import Humidity from\"./assets/weather.png\";import Wind from\"./assets/wind.png\";import React,{useState,useEffect}from\"react\";import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Home(){const{REACT_APP_API_KEY}=process.env;const[data,setData]=useState({celsius:10,name:\"Suche Stadt\",humidity:10,speed:2,image:Cloud,feel:10});const[name,setName]=useState(\"\");const[error,setError]=useState(\"\");// falls geolocation vom user erlaubt:\nuseEffect(()=>{navigator.geolocation.getCurrentPosition(zeigePosition);},[]);// leeres array als abhängigkeit => Effekt wird nur einmalig nach dem ersten rendern ausgeführt\n// koordinaten speicher zur Abfrage der stadt\nfunction zeigePosition(position){const lat=position.coords.latitude;const lon=position.coords.longitude;const apiURL=\"https://api.openweathermap.org/geo/1.0/reverse?lat=\".concat(lat,\"&lon=\").concat(lon,\"&appid=\").concat(REACT_APP_API_KEY);axios.get(apiURL).then(res=>{const city=res.data[0].name;// übergabe der ermittelten stadt aus geolocation an fetchData\nfetchData(city);}).catch(err=>{if(err.response.status===404){setError(\"Invalid City Name\");}else{setError(\"\");}// console.log(err);\n});}// definition der fetchData fkt\nfunction fetchData(cityName){const apiURL=\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(cityName,\"&appid=\").concat(REACT_APP_API_KEY,\"&units=metric&lang=de\");axios.get(apiURL).then(res=>{let imagePath=\"\";// console.log(res.data);\nif(res.data.weather[0].main===\"Clouds\"){imagePath=Cloud;}else if(res.data.weather[0].main===\"Clear\"){imagePath=Clear;}else if(res.data.weather[0].main===\"Rain\"){imagePath=Rain;}else if(res.data.weather[0].main===\"Drizzle\"){imagePath=Rain;}else if(res.data.weather[0].main===\"Mist\"){imagePath=Fog;}else if(res.data.weather[0].main===\"Snow\"){imagePath=Snow;}else if(res.data.weather[0].main===\"Thunderstorm\"){imagePath=Storm;}else{imagePath=Cloud;}setData({...data,// kopiere vorhandene daten und aktualisiere\ncelsius:res.data.main.temp,name:res.data.name,humidity:res.data.main.humidity,speed:res.data.wind.speed,image:imagePath,feel:res.data.main.feels_like});setError(\"\");}).catch(err=>{if(err.response.status===404){setError(\"Invalid City Name\");}else{setError(\"\");}console.log(err);});}const handleClick=()=>{if(name!==\"\"){fetchData(name);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"current_lo\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"weather\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search\",children:[/*#__PURE__*/_jsx(\"input\",{id:\"input\",type:\"text\",placeholder:\"Enter City Name\"// update die stadt im name / setname usestate\n,onChange:e=>setName(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:handleClick,children:/*#__PURE__*/_jsx(\"i\",{className:\"fa-solid fa-magnifying-glass\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"winfo\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:/*#__PURE__*/_jsx(\"p\",{children:error})}),/*#__PURE__*/_jsx(\"img\",{src:data.image,alt:\"cloud\"}),/*#__PURE__*/_jsxs(\"h1\",{children:[Math.round(data.celsius),\"\\xB0C\"]}),/*#__PURE__*/_jsx(\"h2\",{children:data.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"details\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{src:Humidity,alt:\"humidity\"})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[Math.round(data.humidity),\"%\"]}),/*#__PURE__*/_jsx(\"p\",{children:\"Humidity\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"col\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{src:Wind,alt:\"wind\"})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[Math.round(data.speed),\"km/h\"]}),/*#__PURE__*/_jsx(\"p\",{children:\"Wind\"})]})]})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"copyright-mobil\",children:/*#__PURE__*/_jsx(\"a\",{href:\"https://www.flaticon.com/free-icons/weather\",title:\"weather icons\",children:\"Weather icons created by iconixar - Flaticon\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"copyright\",children:/*#__PURE__*/_jsx(\"a\",{href:\"https://www.flaticon.com/free-icons/weather\",title:\"weather icons\",children:\"Weather icons created by iconixar - Flaticon\"})})]});}export default Home;","map":{"version":3,"names":["Cloud","Clear","Rain","Storm","Fog","Snow","Humidity","Wind","React","useState","useEffect","axios","jsx","_jsx","jsxs","_jsxs","Home","REACT_APP_API_KEY","process","env","data","setData","celsius","name","humidity","speed","image","feel","setName","error","setError","navigator","geolocation","getCurrentPosition","zeigePosition","position","lat","coords","latitude","lon","longitude","apiURL","concat","get","then","res","city","fetchData","catch","err","response","status","cityName","imagePath","weather","main","temp","wind","feels_like","console","log","handleClick","className","children","id","type","placeholder","onChange","e","target","value","onClick","src","alt","Math","round","href","title"],"sources":["/Users/carobert/Documents/Web_Development/react-weather-app/weather-app/src/Components/Home.js"],"sourcesContent":["import \"../style.css\";\nimport Cloud from \"./assets/cloud.png\";\nimport Clear from \"./assets/sun.png\";\nimport Rain from \"./assets/rainy-day.png\";\nimport Storm from \"./assets/storm.png\";\nimport Fog from \"./assets/fog.png\";\nimport Snow from \"./assets/snowy.png\";\nimport Humidity from \"./assets/weather.png\";\nimport Wind from \"./assets/wind.png\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Home() {\n  const { REACT_APP_API_KEY } = process.env;\n\n  const [data, setData] = useState({\n    celsius: 10,\n    name: \"Suche Stadt\",\n    humidity: 10,\n    speed: 2,\n    image: Cloud,\n    feel: 10,\n  });\n\n  const [name, setName] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // falls geolocation vom user erlaubt:\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(zeigePosition);\n  }, []); // leeres array als abhängigkeit => Effekt wird nur einmalig nach dem ersten rendern ausgeführt\n\n  // koordinaten speicher zur Abfrage der stadt\n  function zeigePosition(position) {\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n\n    const apiURL = `https://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lon}&appid=${REACT_APP_API_KEY}`;\n\n    axios\n      .get(apiURL)\n      .then((res) => {\n        const city = res.data[0].name;\n        // übergabe der ermittelten stadt aus geolocation an fetchData\n        fetchData(city);\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          setError(\"Invalid City Name\");\n        } else {\n          setError(\"\");\n        }\n        // console.log(err);\n      });\n  }\n\n  // definition der fetchData fkt\n  function fetchData(cityName) {\n    const apiURL = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${REACT_APP_API_KEY}&units=metric&lang=de`;\n\n    axios\n      .get(apiURL)\n      .then((res) => {\n        let imagePath = \"\";\n        // console.log(res.data);\n\n        if (res.data.weather[0].main === \"Clouds\") {\n          imagePath = Cloud;\n        } else if (res.data.weather[0].main === \"Clear\") {\n          imagePath = Clear;\n        } else if (res.data.weather[0].main === \"Rain\") {\n          imagePath = Rain;\n        } else if (res.data.weather[0].main === \"Drizzle\") {\n          imagePath = Rain;\n        } else if (res.data.weather[0].main === \"Mist\") {\n          imagePath = Fog;\n        } else if (res.data.weather[0].main === \"Snow\") {\n          imagePath = Snow;\n        } else if (res.data.weather[0].main === \"Thunderstorm\") {\n          imagePath = Storm;\n        } else {\n          imagePath = Cloud;\n        }\n\n        setData({\n          ...data, // kopiere vorhandene daten und aktualisiere\n          celsius: res.data.main.temp,\n          name: res.data.name,\n          humidity: res.data.main.humidity,\n          speed: res.data.wind.speed,\n          image: imagePath,\n          feel: res.data.main.feels_like,\n        });\n        setError(\"\");\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          setError(\"Invalid City Name\");\n        } else {\n          setError(\"\");\n        }\n        console.log(err);\n      });\n  }\n\n  const handleClick = () => {\n    if (name !== \"\") {\n      fetchData(name);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"current_lo\"></div>\n      <div className=\"weather\">\n        <div className=\"search\">\n          <input\n            id=\"input\"\n            type=\"text\"\n            placeholder=\"Enter City Name\"\n            // update die stadt im name / setname usestate\n            onChange={(e) => setName(e.target.value)}\n          />\n          <button onClick={handleClick}>\n            <i className=\"fa-solid fa-magnifying-glass\"></i>\n          </button>\n        </div>\n        <div className=\"winfo\">\n          <div className=\"error\">\n            <p>{error}</p>\n          </div>\n          <img src={data.image} alt=\"cloud\" />\n          <h1>{Math.round(data.celsius)}°C</h1>\n          <h2>{data.name}</h2>\n          <div className=\"details\">\n            <div className=\"col\">\n              <div>\n                <img src={Humidity} alt=\"humidity\" />\n              </div>\n              <div>\n                <p>{Math.round(data.humidity)}%</p>\n                <p>Humidity</p>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div>\n                <img src={Wind} alt=\"wind\" />\n              </div>\n              <div>\n                <p>{Math.round(data.speed)}km/h</p>\n                <p>Wind</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"copyright-mobil\">\n          <a\n            href=\"https://www.flaticon.com/free-icons/weather\"\n            title=\"weather icons\"\n          >\n            Weather icons created by iconixar - Flaticon\n          </a>\n        </div>\n      </div>\n      <div className=\"copyright\">\n        <a\n          href=\"https://www.flaticon.com/free-icons/weather\"\n          title=\"weather icons\"\n        >\n          Weather icons created by iconixar - Flaticon\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}