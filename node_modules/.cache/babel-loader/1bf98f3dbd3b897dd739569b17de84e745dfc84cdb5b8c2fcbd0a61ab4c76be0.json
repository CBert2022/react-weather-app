{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import axios from\"axios\";import Cloud from\"./assets/cloud.png\";import Clear from\"./assets/sun.png\";import Rain from\"./assets/rainy-day.png\";import Storm from\"./assets/storm.png\";import Fog from\"./assets/fog.png\";import Snow from\"./assets/snowy.png\";import Cloudy from\"./assets/cloudy.png\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function Details(_ref){let{cityName}=_ref;// Zugriff auf die API-Schlüssel aus den Umgebungsvariablen\nconst{REACT_APP_API_KEY}=process.env;// Ermitteln der Wochentage\nlet daysOfWeek=[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"];// Index des heutigen Wochentags\nlet today=new Date().getDay();// Objekt zum Sammeln der Mindest- und Maximaltemperaturen für jeden Tag\nlet tempsByDay={};// Zustände für die Wetterdaten der nächsten Tage\nconst[nextDaysWeather,setNextDaysWeather]=useState([]);useEffect(()=>{const fetchData=async()=>{try{if(cityName){// Nur ausführen, wenn cityName nicht leer ist\nconst response=await axios.get(\"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(cityName,\"&appid=\").concat(REACT_APP_API_KEY,\"&units=metric&lang=de\"));const weatherData=response.data.list;// console.log(\"details API: \" + cityName);\n// Durchlaufen der Wetterdaten und Sammeln nach Tag\nfor(let i=0;i<weatherData.length;i++){let apiDate=new Date(weatherData[i].dt_txt).getDay();let minTempOfDay=weatherData[i].main.temp_min;let maxTempOfDay=weatherData[i].main.temp_max;let iconOfDay=weatherData[i].weather[0].main;// Vergleichen der Wochentage\nif(apiDate!==today){let dayOfWeek=daysOfWeek[apiDate];// Überprüfen, ob bereits ein Eintrag für diesen Wochentag im Objekt existiert\nif(!tempsByDay[dayOfWeek]){tempsByDay[dayOfWeek]={min:[],max:[],icon:[]};}// Mindest- und Maximaltemperatur sowie das Icon zum entsprechenden Tag hinzufügen\ntempsByDay[dayOfWeek].min.push(minTempOfDay);tempsByDay[dayOfWeek].max.push(maxTempOfDay);tempsByDay[dayOfWeek].icon.push(iconOfDay);}}// Daten für die nächsten Tage zusammenstellen\nconst nextDays=[];for(let day in tempsByDay){let minTemp=tempsByDay[day].min[0];let maxTemp=tempsByDay[day].max[0];let icon=Cloudy;// Standardwert\n// Mindest- und Maximaltemperatur für den Tag berechnen\nfor(let i=0;i<tempsByDay[day].min.length;i++){if(tempsByDay[day].min[i]<minTemp){minTemp=tempsByDay[day].min[i];}if(tempsByDay[day].max[i]>maxTemp){maxTemp=tempsByDay[day].max[i];}}// Icon auswählen basierend auf dem häufigsten Wetter\nlet weatherCount={};// Durchlaufen der Liste der Wettersymbole des Tages und Zählen der Häufigkeit jedes Wettersymbols\ntempsByDay[day].icon.forEach(weather=>{if(weatherCount[weather]){weatherCount[weather]+=1;// erhöhe seinen Zähler um 1\n}else{weatherCount[weather]=1;// oder wenn Symbol zu ersten mal -> setze seinen Zähler auf 1\n}});let maxCount=0;//console.log(weatherCount);\nlet mostCommonWeather=null;for(let weather in weatherCount){if(weatherCount[weather]>maxCount){maxCount=weatherCount[weather];mostCommonWeather=weather;}}icon=getWeatherIcon(mostCommonWeather);nextDays.push({name:day,minTemp:minTemp,maxTemp:maxTemp,icon:icon});}// Setzen der Zustände für die Wetterdaten der nächsten Tage\nsetNextDaysWeather(nextDays);}// schließt die Bedingung if (cityName)\n}catch(error){console.error(\"Fehler beim Abrufen der Wetterdaten:\",error);}};fetchData();},[]);// Überprüfen Sie die Stadtänderung\nuseEffect(()=>{//console.log(\"Neuer Stadtnamen:\", cityName);\n},[cityName]);// Funktion zum Zuweisen des Icons basierend auf dem Wetter\nconst getWeatherIcon=weather=>{switch(weather){case\"Clouds\":return Cloud;case\"Clear\":return Clear;case\"Rain\":return Rain;case\"Storm\":return Storm;case\"Fog\":return Fog;case\"Snow\":return Snow;default:return Cloudy;}};if(cityName){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container_temp_infos\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"5-Tage-Vorhersage\"}),/*#__PURE__*/_jsx(\"div\",{className:\"container_forecast\",children:nextDaysWeather.map((day,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"forecast_row\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"day\",children:day.name}),/*#__PURE__*/_jsx(\"img\",{className:\"forecast_icon\",src:day.icon,alt:\"wetter icon\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"minTemp temp\",children:[Math.round(day.minTemp),\"\\xB0C\"]}),/*#__PURE__*/_jsxs(\"p\",{className:\"temp\",children:[Math.round(day.maxTemp),\"\\xB0C\"]})]}),index!==nextDaysWeather.length-1&&/*#__PURE__*/_jsx(\"div\",{className:\"devider_forcast\"})]},index))})]})});}else{return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"spinner-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"})})});}}export default Details;","map":{"version":3,"names":["React","useState","useEffect","axios","Cloud","Clear","Rain","Storm","Fog","Snow","Cloudy","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Details","_ref","cityName","REACT_APP_API_KEY","process","env","daysOfWeek","today","Date","getDay","tempsByDay","nextDaysWeather","setNextDaysWeather","fetchData","response","get","concat","weatherData","data","list","i","length","apiDate","dt_txt","minTempOfDay","main","temp_min","maxTempOfDay","temp_max","iconOfDay","weather","dayOfWeek","min","max","icon","push","nextDays","day","minTemp","maxTemp","weatherCount","forEach","maxCount","mostCommonWeather","getWeatherIcon","name","error","console","children","className","map","index","src","alt","Math","round"],"sources":["/Users/carobert/Documents/Web_Development/react-weather-app/weather-app/src/Components/Details.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cloud from \"./assets/cloud.png\";\nimport Clear from \"./assets/sun.png\";\nimport Rain from \"./assets/rainy-day.png\";\nimport Storm from \"./assets/storm.png\";\nimport Fog from \"./assets/fog.png\";\nimport Snow from \"./assets/snowy.png\";\nimport Cloudy from \"./assets/cloudy.png\";\n\nfunction Details({ cityName }) {\n  // Zugriff auf die API-Schlüssel aus den Umgebungsvariablen\n  const { REACT_APP_API_KEY } = process.env;\n\n  // Ermitteln der Wochentage\n  let daysOfWeek = [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"];\n\n  // Index des heutigen Wochentags\n  let today = new Date().getDay();\n\n  // Objekt zum Sammeln der Mindest- und Maximaltemperaturen für jeden Tag\n  let tempsByDay = {};\n\n  // Zustände für die Wetterdaten der nächsten Tage\n  const [nextDaysWeather, setNextDaysWeather] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (cityName) {\n          // Nur ausführen, wenn cityName nicht leer ist\n          const response = await axios.get(\n            `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${REACT_APP_API_KEY}&units=metric&lang=de`\n          );\n          const weatherData = response.data.list;\n          // console.log(\"details API: \" + cityName);\n\n          // Durchlaufen der Wetterdaten und Sammeln nach Tag\n          for (let i = 0; i < weatherData.length; i++) {\n            let apiDate = new Date(weatherData[i].dt_txt).getDay();\n            let minTempOfDay = weatherData[i].main.temp_min;\n            let maxTempOfDay = weatherData[i].main.temp_max;\n            let iconOfDay = weatherData[i].weather[0].main;\n\n            // Vergleichen der Wochentage\n            if (apiDate !== today) {\n              let dayOfWeek = daysOfWeek[apiDate];\n              // Überprüfen, ob bereits ein Eintrag für diesen Wochentag im Objekt existiert\n              if (!tempsByDay[dayOfWeek]) {\n                tempsByDay[dayOfWeek] = { min: [], max: [], icon: [] };\n              }\n              // Mindest- und Maximaltemperatur sowie das Icon zum entsprechenden Tag hinzufügen\n              tempsByDay[dayOfWeek].min.push(minTempOfDay);\n              tempsByDay[dayOfWeek].max.push(maxTempOfDay);\n              tempsByDay[dayOfWeek].icon.push(iconOfDay);\n            }\n          }\n\n          // Daten für die nächsten Tage zusammenstellen\n          const nextDays = [];\n          for (let day in tempsByDay) {\n            let minTemp = tempsByDay[day].min[0];\n            let maxTemp = tempsByDay[day].max[0];\n            let icon = Cloudy; // Standardwert\n\n            // Mindest- und Maximaltemperatur für den Tag berechnen\n            for (let i = 0; i < tempsByDay[day].min.length; i++) {\n              if (tempsByDay[day].min[i] < minTemp) {\n                minTemp = tempsByDay[day].min[i];\n              }\n              if (tempsByDay[day].max[i] > maxTemp) {\n                maxTemp = tempsByDay[day].max[i];\n              }\n            }\n\n            // Icon auswählen basierend auf dem häufigsten Wetter\n            let weatherCount = {};\n            // Durchlaufen der Liste der Wettersymbole des Tages und Zählen der Häufigkeit jedes Wettersymbols\n            tempsByDay[day].icon.forEach((weather) => {\n              if (weatherCount[weather]) {\n                weatherCount[weather] += 1; // erhöhe seinen Zähler um 1\n              } else {\n                weatherCount[weather] = 1; // oder wenn Symbol zu ersten mal -> setze seinen Zähler auf 1\n              }\n            });\n            let maxCount = 0;\n            //console.log(weatherCount);\n            let mostCommonWeather = null;\n            for (let weather in weatherCount) {\n              if (weatherCount[weather] > maxCount) {\n                maxCount = weatherCount[weather];\n                mostCommonWeather = weather;\n              }\n            }\n            icon = getWeatherIcon(mostCommonWeather);\n\n            nextDays.push({\n              name: day,\n              minTemp: minTemp,\n              maxTemp: maxTemp,\n              icon: icon,\n            });\n          }\n\n          // Setzen der Zustände für die Wetterdaten der nächsten Tage\n          setNextDaysWeather(nextDays);\n        } // schließt die Bedingung if (cityName)\n      } catch (error) {\n        console.error(\"Fehler beim Abrufen der Wetterdaten:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Überprüfen Sie die Stadtänderung\n  useEffect(() => {\n    //console.log(\"Neuer Stadtnamen:\", cityName);\n  }, [cityName]);\n\n  // Funktion zum Zuweisen des Icons basierend auf dem Wetter\n  const getWeatherIcon = (weather) => {\n    switch (weather) {\n      case \"Clouds\":\n        return Cloud;\n      case \"Clear\":\n        return Clear;\n      case \"Rain\":\n        return Rain;\n      case \"Storm\":\n        return Storm;\n      case \"Fog\":\n        return Fog;\n      case \"Snow\":\n        return Snow;\n      default:\n        return Cloudy;\n    }\n  };\n\n  if (cityName) {\n    return (\n      <>\n        <div className=\"container_temp_infos\">\n          <h3>5-Tage-Vorhersage</h3>\n          <div className=\"container_forecast\">\n            {nextDaysWeather.map((day, index) => (\n              <div key={index}>\n                <div className=\"forecast_row\">\n                  <p className=\"day\">{day.name}</p>\n                  <img\n                    className=\"forecast_icon\"\n                    src={day.icon}\n                    alt=\"wetter icon\"\n                  />\n                  <p className=\"minTemp temp\">{Math.round(day.minTemp)}°C</p>\n                  <p className=\"temp\">{Math.round(day.maxTemp)}°C</p>\n                </div>\n                {index !== nextDaysWeather.length - 1 && (\n                  <div className=\"devider_forcast\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <div className=\"spinner-container\">\n          <div className=\"spinner\"></div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Details;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}