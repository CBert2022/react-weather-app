{"ast":null,"code":"var _jsxFileName = \"/Users/carobert/Documents/Web_Development/react-weather-app/weather-app/src/Components/Details.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cloud from \"./assets/cloud.png\";\nimport Clear from \"./assets/sun.png\";\nimport Rain from \"./assets/rainy-day.png\";\nimport Storm from \"./assets/storm.png\";\nimport Fog from \"./assets/fog.png\";\nimport Snow from \"./assets/snowy.png\";\nimport Cloudy from \"./assets/cloudy.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Details({\n  cityName\n}) {\n  _s();\n  // Zugriff auf die API-Schlüssel aus den Umgebungsvariablen\n  const {\n    REACT_APP_API_KEY\n  } = process.env;\n\n  // Ermitteln der Wochentage\n  let daysOfWeek = [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"];\n\n  // Index des heutigen Wochentags\n  let today = new Date().getDay();\n\n  // Objekt zum Sammeln der Mindest- und Maximaltemperaturen für jeden Tag\n  let tempsByDay = {};\n\n  // Zustände für die Wetterdaten der nächsten Tage\n  const [nextDaysWeather, setNextDaysWeather] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (cityName) {\n          // Nur ausführen, wenn cityName nicht leer ist\n          const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${REACT_APP_API_KEY}&units=metric&lang=de`);\n          const weatherData = response.data.list;\n          console.log(response.data.list[0].main.temp);\n          const sameDayForecastDays = [];\n          const sameDayForecastTemps = [];\n\n          //SAME DAY FORECAST\n          // Durchlaufen der Wetterdaten und Sammeln der Temp Vorhersagen alle 3h\n          for (let i = 0; i < 7; i++) {\n            let temp = weatherData[i].main.temp;\n            // String Datum zu Date Objekt umwandeln\n            let day = new Date(weatherData[i].dt_txt);\n            let dayOfWeek = daysOfWeek[day.getDay()]; // Verwendung des Index, um den Wochentag als Str zu erhalten\n            sameDayForecastDays.push(dayOfWeek);\n            sameDayForecastTemps.push(temp);\n          }\n          console.log(sameDayForecastDays, sameDayForecastTemps);\n\n          //5-DAY FORECAST\n          // Durchlaufen der Wetterdaten und Sammeln nach Tag\n          for (let i = 0; i < weatherData.length; i++) {\n            let apiDate = new Date(weatherData[i].dt_txt).getDay();\n            let minTempOfDay = weatherData[i].main.temp_min;\n            let maxTempOfDay = weatherData[i].main.temp_max;\n            let iconOfDay = weatherData[i].weather[0].main;\n\n            // Vergleichen der Wochentage\n            if (apiDate !== today) {\n              let dayOfWeek = daysOfWeek[apiDate];\n              // Überprüfen, ob bereits ein Eintrag für diesen Wochentag im Objekt existiert\n              if (!tempsByDay[dayOfWeek]) {\n                tempsByDay[dayOfWeek] = {\n                  min: [],\n                  max: [],\n                  icon: []\n                };\n              }\n              // Mindest- und Maximaltemperatur sowie das Icon zum entsprechenden Tag hinzufügen\n              tempsByDay[dayOfWeek].min.push(minTempOfDay);\n              tempsByDay[dayOfWeek].max.push(maxTempOfDay);\n              tempsByDay[dayOfWeek].icon.push(iconOfDay);\n            }\n          }\n\n          // Daten für die nächsten Tage zusammenstellen\n          const nextDays = [];\n          for (let day in tempsByDay) {\n            let minTemp = tempsByDay[day].min[0];\n            let maxTemp = tempsByDay[day].max[0];\n            let icon = Cloudy; // Standardwert\n\n            // Mindest- und Maximaltemperatur für den Tag berechnen\n            for (let i = 0; i < tempsByDay[day].min.length; i++) {\n              if (tempsByDay[day].min[i] < minTemp) {\n                minTemp = tempsByDay[day].min[i];\n              }\n              if (tempsByDay[day].max[i] > maxTemp) {\n                maxTemp = tempsByDay[day].max[i];\n              }\n            }\n\n            // Icon auswählen basierend auf dem häufigsten Wetter\n            let weatherCount = {};\n            // Durchlaufen der Liste der Wettersymbole des Tages und Zählen der Häufigkeit jedes Wettersymbols\n            tempsByDay[day].icon.forEach(weather => {\n              if (weatherCount[weather]) {\n                weatherCount[weather] += 1; // erhöhe seinen Zähler um 1\n              } else {\n                weatherCount[weather] = 1; // oder wenn Symbol zu ersten mal -> setze seinen Zähler auf 1\n              }\n            });\n            let maxCount = 0;\n            //console.log(weatherCount);\n            let mostCommonWeather = null;\n            for (let weather in weatherCount) {\n              if (weatherCount[weather] > maxCount) {\n                maxCount = weatherCount[weather];\n                mostCommonWeather = weather;\n              }\n            }\n            icon = getWeatherIcon(mostCommonWeather);\n            nextDays.push({\n              name: day,\n              minTemp: minTemp,\n              maxTemp: maxTemp,\n              icon: icon\n            });\n          }\n\n          // Setzen der Zustände für die Wetterdaten der nächsten Tage\n          setNextDaysWeather(nextDays);\n        } // schließt die Bedingung if (cityName)\n      } catch (error) {\n        console.error(\"Fehler beim Abrufen der Wetterdaten:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Überprüfen Sie die Stadtänderung\n  useEffect(() => {\n    //console.log(\"Neuer Stadtnamen:\", cityName);\n  }, [cityName]);\n\n  // Funktion zum Zuweisen des Icons basierend auf dem Wetter\n  const getWeatherIcon = weather => {\n    switch (weather) {\n      case \"Clouds\":\n        return Cloud;\n      case \"Clear\":\n        return Clear;\n      case \"Rain\":\n        return Rain;\n      case \"Storm\":\n        return Storm;\n      case \"Fog\":\n        return Fog;\n      case \"Snow\":\n        return Snow;\n      default:\n        return Cloudy;\n    }\n  };\n  if (cityName) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container_temp_infos\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"5-Tage-Vorhersage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container_forecast\",\n          children: nextDaysWeather.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast_row\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"day\",\n                children: day.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"forecast_icon\",\n                src: day.icon,\n                alt: \"wetter icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"minTemp temp\",\n                children: [Math.round(day.minTemp), \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"temp\",\n                children: [Math.round(day.maxTemp), \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this), index !== nextDaysWeather.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"devider_forcast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n_s(Details, \"kJGNvAhmILKwPwDJfpeaxkTl8Wk=\");\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["React","useState","useEffect","axios","Cloud","Clear","Rain","Storm","Fog","Snow","Cloudy","jsxDEV","_jsxDEV","Fragment","_Fragment","Details","cityName","_s","REACT_APP_API_KEY","process","env","daysOfWeek","today","Date","getDay","tempsByDay","nextDaysWeather","setNextDaysWeather","fetchData","response","get","weatherData","data","list","console","log","main","temp","sameDayForecastDays","sameDayForecastTemps","i","day","dt_txt","dayOfWeek","push","length","apiDate","minTempOfDay","temp_min","maxTempOfDay","temp_max","iconOfDay","weather","min","max","icon","nextDays","minTemp","maxTemp","weatherCount","forEach","maxCount","mostCommonWeather","getWeatherIcon","name","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","index","src","alt","Math","round","_c","$RefreshReg$"],"sources":["/Users/carobert/Documents/Web_Development/react-weather-app/weather-app/src/Components/Details.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cloud from \"./assets/cloud.png\";\nimport Clear from \"./assets/sun.png\";\nimport Rain from \"./assets/rainy-day.png\";\nimport Storm from \"./assets/storm.png\";\nimport Fog from \"./assets/fog.png\";\nimport Snow from \"./assets/snowy.png\";\nimport Cloudy from \"./assets/cloudy.png\";\n\nfunction Details({ cityName }) {\n  // Zugriff auf die API-Schlüssel aus den Umgebungsvariablen\n  const { REACT_APP_API_KEY } = process.env;\n\n  // Ermitteln der Wochentage\n  let daysOfWeek = [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"];\n\n  // Index des heutigen Wochentags\n  let today = new Date().getDay();\n\n  // Objekt zum Sammeln der Mindest- und Maximaltemperaturen für jeden Tag\n  let tempsByDay = {};\n\n  // Zustände für die Wetterdaten der nächsten Tage\n  const [nextDaysWeather, setNextDaysWeather] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (cityName) {\n          // Nur ausführen, wenn cityName nicht leer ist\n          const response = await axios.get(\n            `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${REACT_APP_API_KEY}&units=metric&lang=de`\n          );\n          const weatherData = response.data.list;\n          console.log(response.data.list[0].main.temp);\n          const sameDayForecastDays = [];\n          const sameDayForecastTemps = [];\n\n          //SAME DAY FORECAST\n          // Durchlaufen der Wetterdaten und Sammeln der Temp Vorhersagen alle 3h\n          for (let i = 0; i < 7; i++) {\n            let temp = weatherData[i].main.temp;\n            // String Datum zu Date Objekt umwandeln\n            let day = new Date(weatherData[i].dt_txt);\n            let dayOfWeek = daysOfWeek[day.getDay()]; // Verwendung des Index, um den Wochentag als Str zu erhalten\n            sameDayForecastDays.push(dayOfWeek);\n            sameDayForecastTemps.push(temp);\n          }\n\n          console.log(sameDayForecastDays, sameDayForecastTemps);\n\n          //5-DAY FORECAST\n          // Durchlaufen der Wetterdaten und Sammeln nach Tag\n          for (let i = 0; i < weatherData.length; i++) {\n            let apiDate = new Date(weatherData[i].dt_txt).getDay();\n            let minTempOfDay = weatherData[i].main.temp_min;\n            let maxTempOfDay = weatherData[i].main.temp_max;\n            let iconOfDay = weatherData[i].weather[0].main;\n\n            // Vergleichen der Wochentage\n            if (apiDate !== today) {\n              let dayOfWeek = daysOfWeek[apiDate];\n              // Überprüfen, ob bereits ein Eintrag für diesen Wochentag im Objekt existiert\n              if (!tempsByDay[dayOfWeek]) {\n                tempsByDay[dayOfWeek] = { min: [], max: [], icon: [] };\n              }\n              // Mindest- und Maximaltemperatur sowie das Icon zum entsprechenden Tag hinzufügen\n              tempsByDay[dayOfWeek].min.push(minTempOfDay);\n              tempsByDay[dayOfWeek].max.push(maxTempOfDay);\n              tempsByDay[dayOfWeek].icon.push(iconOfDay);\n            }\n          }\n\n          // Daten für die nächsten Tage zusammenstellen\n          const nextDays = [];\n          for (let day in tempsByDay) {\n            let minTemp = tempsByDay[day].min[0];\n            let maxTemp = tempsByDay[day].max[0];\n            let icon = Cloudy; // Standardwert\n\n            // Mindest- und Maximaltemperatur für den Tag berechnen\n            for (let i = 0; i < tempsByDay[day].min.length; i++) {\n              if (tempsByDay[day].min[i] < minTemp) {\n                minTemp = tempsByDay[day].min[i];\n              }\n              if (tempsByDay[day].max[i] > maxTemp) {\n                maxTemp = tempsByDay[day].max[i];\n              }\n            }\n\n            // Icon auswählen basierend auf dem häufigsten Wetter\n            let weatherCount = {};\n            // Durchlaufen der Liste der Wettersymbole des Tages und Zählen der Häufigkeit jedes Wettersymbols\n            tempsByDay[day].icon.forEach((weather) => {\n              if (weatherCount[weather]) {\n                weatherCount[weather] += 1; // erhöhe seinen Zähler um 1\n              } else {\n                weatherCount[weather] = 1; // oder wenn Symbol zu ersten mal -> setze seinen Zähler auf 1\n              }\n            });\n            let maxCount = 0;\n            //console.log(weatherCount);\n            let mostCommonWeather = null;\n            for (let weather in weatherCount) {\n              if (weatherCount[weather] > maxCount) {\n                maxCount = weatherCount[weather];\n                mostCommonWeather = weather;\n              }\n            }\n            icon = getWeatherIcon(mostCommonWeather);\n\n            nextDays.push({\n              name: day,\n              minTemp: minTemp,\n              maxTemp: maxTemp,\n              icon: icon,\n            });\n          }\n\n          // Setzen der Zustände für die Wetterdaten der nächsten Tage\n          setNextDaysWeather(nextDays);\n        } // schließt die Bedingung if (cityName)\n      } catch (error) {\n        console.error(\"Fehler beim Abrufen der Wetterdaten:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Überprüfen Sie die Stadtänderung\n  useEffect(() => {\n    //console.log(\"Neuer Stadtnamen:\", cityName);\n  }, [cityName]);\n\n  // Funktion zum Zuweisen des Icons basierend auf dem Wetter\n  const getWeatherIcon = (weather) => {\n    switch (weather) {\n      case \"Clouds\":\n        return Cloud;\n      case \"Clear\":\n        return Clear;\n      case \"Rain\":\n        return Rain;\n      case \"Storm\":\n        return Storm;\n      case \"Fog\":\n        return Fog;\n      case \"Snow\":\n        return Snow;\n      default:\n        return Cloudy;\n    }\n  };\n\n  if (cityName) {\n    return (\n      <>\n        <div className=\"container_temp_infos\">\n          <h3>5-Tage-Vorhersage</h3>\n          <div className=\"container_forecast\">\n            {nextDaysWeather.map((day, index) => (\n              <div key={index}>\n                <div className=\"forecast_row\">\n                  <p className=\"day\">{day.name}</p>\n                  <img\n                    className=\"forecast_icon\"\n                    src={day.icon}\n                    alt=\"wetter icon\"\n                  />\n                  <p className=\"minTemp temp\">{Math.round(day.minTemp)}°C</p>\n                  <p className=\"temp\">{Math.round(day.maxTemp)}°C</p>\n                </div>\n                {index !== nextDaysWeather.length - 1 && (\n                  <div className=\"devider_forcast\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <div className=\"spinner-container\">\n          <div className=\"spinner\"></div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Details;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}