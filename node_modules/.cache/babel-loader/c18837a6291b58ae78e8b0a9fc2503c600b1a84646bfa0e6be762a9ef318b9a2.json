{"ast":null,"code":"var _jsxFileName = \"/Users/carobert/Documents/Web_Development/react-weather-app/weather-app/src/Components/Details.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cloud from \"./assets/cloud.png\";\nimport Clear from \"./assets/sun.png\";\nimport Rain from \"./assets/rainy-day.png\";\nimport Storm from \"./assets/storm.png\";\nimport Fog from \"./assets/fog.png\";\nimport Snow from \"./assets/snowy.png\";\nimport Cloudy from \"./assets/cloudy.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Details({\n  cityName\n}) {\n  _s();\n  // Zugriff auf die API-Schlüssel aus den Umgebungsvariablen\n  const {\n    REACT_APP_API_KEY\n  } = process.env;\n\n  // Ermitteln der Wochentage\n  let daysOfWeek = [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"];\n\n  // Index des heutigen Wochentags\n  let today = new Date().getDay();\n\n  // Objekt zum Sammeln der Mindest- und Maximaltemperaturen für jeden Tag\n  let tempsByDay = {};\n\n  // Zustände für die Wetterdaten des Tage\n  const [sameDayForecast, setSameDayForecast] = useState([]);\n\n  // Zustände für die Wetterdaten der nächsten Tage\n  const [nextDaysWeather, setNextDaysWeather] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (cityName) {\n          // Nur ausführen, wenn cityName nicht leer ist\n          const response = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${REACT_APP_API_KEY}&units=metric&lang=de`);\n          const weatherData = response.data.list;\n          console.log(response.data.list[0].weather[0].main);\n          const sameDayForecast = [];\n\n          //SAME DAY FORECAST\n          // Durchlaufen der Wetterdaten und Sammeln der Temp Vorhersagen alle 3h\n          for (let i = 0; i < 7; i++) {\n            let temp = weatherData[i].main.temp;\n            // String Datum zu Date Objekt umwandeln\n            let day = new Date(weatherData[i].dt_txt).getHours();\n            let iconOfDay = getWeatherIcon(weatherData[i].weather[0].main); // Verwendung von getWeatherIcon, um das Icon basierend auf dem Wetterstatus zu erhalten\n            let data = {\n              temp,\n              day,\n              iconOfDay\n            };\n            sameDayForecast.push(data);\n          }\n          setSameDayForecast(sameDayForecast);\n          console.log(sameDayForecast);\n\n          //5-DAY FORECAST\n          // Durchlaufen der Wetterdaten und Sammeln nach Tag\n          for (let i = 0; i < weatherData.length; i++) {\n            let apiDate = new Date(weatherData[i].dt_txt).getDay();\n            let minTempOfDay = weatherData[i].main.temp_min;\n            let maxTempOfDay = weatherData[i].main.temp_max;\n            let iconOfDay = weatherData[i].weather[0].main;\n\n            // Vergleichen der Wochentage\n            if (apiDate !== today) {\n              let dayOfWeek = daysOfWeek[apiDate];\n              // Überprüfen, ob bereits ein Eintrag für diesen Wochentag im Objekt existiert\n              if (!tempsByDay[dayOfWeek]) {\n                tempsByDay[dayOfWeek] = {\n                  min: [],\n                  max: [],\n                  icon: []\n                };\n              }\n              // Mindest- und Maximaltemperatur sowie das Icon zum entsprechenden Tag hinzufügen\n              tempsByDay[dayOfWeek].min.push(minTempOfDay);\n              tempsByDay[dayOfWeek].max.push(maxTempOfDay);\n              tempsByDay[dayOfWeek].icon.push(iconOfDay);\n            }\n          }\n\n          // Daten für die nächsten Tage zusammenstellen\n          const nextDays = [];\n          for (let day in tempsByDay) {\n            let minTemp = tempsByDay[day].min[0];\n            let maxTemp = tempsByDay[day].max[0];\n            let icon = Cloudy; // Standardwert\n\n            // Mindest- und Maximaltemperatur für den Tag berechnen\n            for (let i = 0; i < tempsByDay[day].min.length; i++) {\n              if (tempsByDay[day].min[i] < minTemp) {\n                minTemp = tempsByDay[day].min[i];\n              }\n              if (tempsByDay[day].max[i] > maxTemp) {\n                maxTemp = tempsByDay[day].max[i];\n              }\n            }\n\n            // Icon auswählen basierend auf dem häufigsten Wetter\n            let weatherCount = {};\n            // Durchlaufen der Liste der Wettersymbole des Tages und Zählen der Häufigkeit jedes Wettersymbols\n            tempsByDay[day].icon.forEach(weather => {\n              if (weatherCount[weather]) {\n                weatherCount[weather] += 1; // erhöhe seinen Zähler um 1\n              } else {\n                weatherCount[weather] = 1; // oder wenn Symbol zu ersten mal -> setze seinen Zähler auf 1\n              }\n            });\n            let maxCount = 0;\n            //console.log(weatherCount);\n            let mostCommonWeather = null;\n            for (let weather in weatherCount) {\n              if (weatherCount[weather] > maxCount) {\n                maxCount = weatherCount[weather];\n                mostCommonWeather = weather;\n              }\n            }\n            icon = getWeatherIcon(mostCommonWeather);\n            nextDays.push({\n              name: day,\n              minTemp: minTemp,\n              maxTemp: maxTemp,\n              icon: icon\n            });\n          }\n\n          // Setzen der Zustände für die Wetterdaten der nächsten Tage\n          setNextDaysWeather(nextDays);\n        } // schließt die Bedingung if (cityName)\n      } catch (error) {\n        console.error(\"Fehler beim Abrufen der Wetterdaten:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Überprüfen Sie die Stadtänderung\n  useEffect(() => {\n    //console.log(\"Neuer Stadtnamen:\", cityName);\n  }, [cityName]);\n\n  // Funktion zum Zuweisen des Icons basierend auf dem Wetter\n  const getWeatherIcon = weather => {\n    switch (weather) {\n      case \"Clouds\":\n        return Cloud;\n      case \"Clear\":\n        return Clear;\n      case \"Rain\":\n        return Rain;\n      case \"Storm\":\n        return Storm;\n      case \"Fog\":\n        return Fog;\n      case \"Snow\":\n        return Snow;\n      default:\n        return Cloudy;\n    }\n  };\n  if (cityName) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container_temp_infos\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Tages-Vorhersage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"daily_forecast_row\",\n          children: sameDayForecast.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"daily_forecast_item\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"day\",\n                children: day.dayOfWeek\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"forecast_icon\",\n                src: day.iconOfDay,\n                alt: \"wetter icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"minTemp temp\",\n                children: [Math.round(day.temp), \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container_temp_infos\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"5-Tage-Vorhersage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container_forecast\",\n          children: nextDaysWeather.map((day, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast_row\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"day\",\n                children: day.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"forecast_icon\",\n                src: day.icon,\n                alt: \"wetter icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"minTemp temp\",\n                children: [Math.round(day.minTemp), \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"temp\",\n                children: [Math.round(day.maxTemp), \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this), index !== nextDaysWeather.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"devider_forcast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n_s(Details, \"37kxgLUDs4FiT2NGCV6GBoULx1c=\");\n_c = Details;\nexport default Details;\nvar _c;\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"names":["React","useState","useEffect","axios","Cloud","Clear","Rain","Storm","Fog","Snow","Cloudy","jsxDEV","_jsxDEV","Fragment","_Fragment","Details","cityName","_s","REACT_APP_API_KEY","process","env","daysOfWeek","today","Date","getDay","tempsByDay","sameDayForecast","setSameDayForecast","nextDaysWeather","setNextDaysWeather","fetchData","response","get","weatherData","data","list","console","log","weather","main","i","temp","day","dt_txt","getHours","iconOfDay","getWeatherIcon","push","length","apiDate","minTempOfDay","temp_min","maxTempOfDay","temp_max","dayOfWeek","min","max","icon","nextDays","minTemp","maxTemp","weatherCount","forEach","maxCount","mostCommonWeather","name","error","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","index","src","alt","Math","round","_c","$RefreshReg$"],"sources":["/Users/carobert/Documents/Web_Development/react-weather-app/weather-app/src/Components/Details.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Cloud from \"./assets/cloud.png\";\nimport Clear from \"./assets/sun.png\";\nimport Rain from \"./assets/rainy-day.png\";\nimport Storm from \"./assets/storm.png\";\nimport Fog from \"./assets/fog.png\";\nimport Snow from \"./assets/snowy.png\";\nimport Cloudy from \"./assets/cloudy.png\";\n\nfunction Details({ cityName }) {\n  // Zugriff auf die API-Schlüssel aus den Umgebungsvariablen\n  const { REACT_APP_API_KEY } = process.env;\n\n  // Ermitteln der Wochentage\n  let daysOfWeek = [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"];\n\n  // Index des heutigen Wochentags\n  let today = new Date().getDay();\n\n  // Objekt zum Sammeln der Mindest- und Maximaltemperaturen für jeden Tag\n  let tempsByDay = {};\n\n  // Zustände für die Wetterdaten des Tage\n  const [sameDayForecast, setSameDayForecast] = useState([]);\n\n  // Zustände für die Wetterdaten der nächsten Tage\n  const [nextDaysWeather, setNextDaysWeather] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (cityName) {\n          // Nur ausführen, wenn cityName nicht leer ist\n          const response = await axios.get(\n            `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${REACT_APP_API_KEY}&units=metric&lang=de`\n          );\n          const weatherData = response.data.list;\n          console.log(response.data.list[0].weather[0].main);\n          const sameDayForecast = [];\n\n          //SAME DAY FORECAST\n          // Durchlaufen der Wetterdaten und Sammeln der Temp Vorhersagen alle 3h\n          for (let i = 0; i < 7; i++) {\n            let temp = weatherData[i].main.temp;\n            // String Datum zu Date Objekt umwandeln\n            let day = new Date(weatherData[i].dt_txt).getHours();\n            let iconOfDay = getWeatherIcon(weatherData[i].weather[0].main); // Verwendung von getWeatherIcon, um das Icon basierend auf dem Wetterstatus zu erhalten\n            let data = { temp, day, iconOfDay };\n            sameDayForecast.push(data);\n          }\n          setSameDayForecast(sameDayForecast);\n          console.log(sameDayForecast);\n\n          //5-DAY FORECAST\n          // Durchlaufen der Wetterdaten und Sammeln nach Tag\n          for (let i = 0; i < weatherData.length; i++) {\n            let apiDate = new Date(weatherData[i].dt_txt).getDay();\n            let minTempOfDay = weatherData[i].main.temp_min;\n            let maxTempOfDay = weatherData[i].main.temp_max;\n            let iconOfDay = weatherData[i].weather[0].main;\n\n            // Vergleichen der Wochentage\n            if (apiDate !== today) {\n              let dayOfWeek = daysOfWeek[apiDate];\n              // Überprüfen, ob bereits ein Eintrag für diesen Wochentag im Objekt existiert\n              if (!tempsByDay[dayOfWeek]) {\n                tempsByDay[dayOfWeek] = { min: [], max: [], icon: [] };\n              }\n              // Mindest- und Maximaltemperatur sowie das Icon zum entsprechenden Tag hinzufügen\n              tempsByDay[dayOfWeek].min.push(minTempOfDay);\n              tempsByDay[dayOfWeek].max.push(maxTempOfDay);\n              tempsByDay[dayOfWeek].icon.push(iconOfDay);\n            }\n          }\n\n          // Daten für die nächsten Tage zusammenstellen\n          const nextDays = [];\n          for (let day in tempsByDay) {\n            let minTemp = tempsByDay[day].min[0];\n            let maxTemp = tempsByDay[day].max[0];\n            let icon = Cloudy; // Standardwert\n\n            // Mindest- und Maximaltemperatur für den Tag berechnen\n            for (let i = 0; i < tempsByDay[day].min.length; i++) {\n              if (tempsByDay[day].min[i] < minTemp) {\n                minTemp = tempsByDay[day].min[i];\n              }\n              if (tempsByDay[day].max[i] > maxTemp) {\n                maxTemp = tempsByDay[day].max[i];\n              }\n            }\n\n            // Icon auswählen basierend auf dem häufigsten Wetter\n            let weatherCount = {};\n            // Durchlaufen der Liste der Wettersymbole des Tages und Zählen der Häufigkeit jedes Wettersymbols\n            tempsByDay[day].icon.forEach((weather) => {\n              if (weatherCount[weather]) {\n                weatherCount[weather] += 1; // erhöhe seinen Zähler um 1\n              } else {\n                weatherCount[weather] = 1; // oder wenn Symbol zu ersten mal -> setze seinen Zähler auf 1\n              }\n            });\n            let maxCount = 0;\n            //console.log(weatherCount);\n            let mostCommonWeather = null;\n            for (let weather in weatherCount) {\n              if (weatherCount[weather] > maxCount) {\n                maxCount = weatherCount[weather];\n                mostCommonWeather = weather;\n              }\n            }\n            icon = getWeatherIcon(mostCommonWeather);\n\n            nextDays.push({\n              name: day,\n              minTemp: minTemp,\n              maxTemp: maxTemp,\n              icon: icon,\n            });\n          }\n\n          // Setzen der Zustände für die Wetterdaten der nächsten Tage\n          setNextDaysWeather(nextDays);\n        } // schließt die Bedingung if (cityName)\n      } catch (error) {\n        console.error(\"Fehler beim Abrufen der Wetterdaten:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Überprüfen Sie die Stadtänderung\n  useEffect(() => {\n    //console.log(\"Neuer Stadtnamen:\", cityName);\n  }, [cityName]);\n\n  // Funktion zum Zuweisen des Icons basierend auf dem Wetter\n  const getWeatherIcon = (weather) => {\n    switch (weather) {\n      case \"Clouds\":\n        return Cloud;\n      case \"Clear\":\n        return Clear;\n      case \"Rain\":\n        return Rain;\n      case \"Storm\":\n        return Storm;\n      case \"Fog\":\n        return Fog;\n      case \"Snow\":\n        return Snow;\n      default:\n        return Cloudy;\n    }\n  };\n\n  if (cityName) {\n    return (\n      <>\n        <div className=\"container_temp_infos\">\n          <h3>Tages-Vorhersage</h3>\n          <div className=\"daily_forecast_row\">\n            {sameDayForecast.map((day, index) => (\n              <div key={index}>\n                <div className=\"daily_forecast_item\">\n                  <p className=\"day\">{day.dayOfWeek}</p>\n                  <img\n                    className=\"forecast_icon\"\n                    src={day.iconOfDay}\n                    alt=\"wetter icon\"\n                  />\n                  <p className=\"minTemp temp\">{Math.round(day.temp)}°C</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"container_temp_infos\">\n          <h3>5-Tage-Vorhersage</h3>\n          <div className=\"container_forecast\">\n            {nextDaysWeather.map((day, index) => (\n              <div key={index}>\n                <div className=\"forecast_row\">\n                  <p className=\"day\">{day.name}</p>\n                  <img\n                    className=\"forecast_icon\"\n                    src={day.icon}\n                    alt=\"wetter icon\"\n                  />\n                  <p className=\"minTemp temp\">{Math.round(day.minTemp)}°C</p>\n                  <p className=\"temp\">{Math.round(day.maxTemp)}°C</p>\n                </div>\n                {index !== nextDaysWeather.length - 1 && (\n                  <div className=\"devider_forcast\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <div className=\"spinner-container\">\n          <div className=\"spinner\"></div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Details;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}